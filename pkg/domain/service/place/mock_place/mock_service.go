// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/service/place/service.go

// Package mock_place is a generated GoMock package.
package mock_place

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	place "wantum/pkg/domain/entity/place"
	repository "wantum/pkg/domain/repository"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockService) Create(ctx context.Context, masterTx repository.MasterTx, name string) (*place.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, masterTx, name)
	ret0, _ := ret[0].(*place.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockServiceMockRecorder) Create(ctx, masterTx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), ctx, masterTx, name)
}

// Update mocks base method
func (m *MockService) Update(ctx context.Context, masterTx repository.MasterTx, placeID int, name string) (*place.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, masterTx, placeID, name)
	ret0, _ := ret[0].(*place.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockServiceMockRecorder) Update(ctx, masterTx, placeID, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockService)(nil).Update), ctx, masterTx, placeID, name)
}

// Delete mocks base method
func (m *MockService) Delete(ctx context.Context, masterTx repository.MasterTx, placeID int) (*place.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, masterTx, placeID)
	ret0, _ := ret[0].(*place.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockServiceMockRecorder) Delete(ctx, masterTx, placeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), ctx, masterTx, placeID)
}

// GetByID mocks base method
func (m *MockService) GetByID(ctx context.Context, masterTx repository.MasterTx, placeID int) (*place.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, masterTx, placeID)
	ret0, _ := ret[0].(*place.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockServiceMockRecorder) GetByID(ctx, masterTx, placeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockService)(nil).GetByID), ctx, masterTx, placeID)
}

// GetAll mocks base method
func (m *MockService) GetAll(ctx context.Context, masterTx repository.MasterTx) (place.EntitySlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, masterTx)
	ret0, _ := ret[0].(place.EntitySlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockServiceMockRecorder) GetAll(ctx, masterTx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockService)(nil).GetAll), ctx, masterTx)
}
