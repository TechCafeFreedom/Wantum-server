// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/service/profile/service.go

// Package mock_profile is a generated GoMock package.
package mock_profile

import (
	context "context"
	reflect "reflect"
	time "time"
	userprofile "wantum/pkg/domain/entity/userprofile"
	repository "wantum/pkg/domain/repository"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateNewProfile mocks base method
func (m *MockService) CreateNewProfile(ctx context.Context, masterTx repository.MasterTx, userID int, name, thumbnail, bio, phone, place string, birth *time.Time, gender int) (*userprofile.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewProfile", ctx, masterTx, userID, name, thumbnail, bio, phone, place, birth, gender)
	ret0, _ := ret[0].(*userprofile.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewProfile indicates an expected call of CreateNewProfile
func (mr *MockServiceMockRecorder) CreateNewProfile(ctx, masterTx, userID, name, thumbnail, bio, phone, place, birth, gender interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewProfile", reflect.TypeOf((*MockService)(nil).CreateNewProfile), ctx, masterTx, userID, name, thumbnail, bio, phone, place, birth, gender)
}

// GetByUserID mocks base method
func (m *MockService) GetByUserID(ctx context.Context, masterTx repository.MasterTx, userID int) (*userprofile.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, masterTx, userID)
	ret0, _ := ret[0].(*userprofile.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID
func (mr *MockServiceMockRecorder) GetByUserID(ctx, masterTx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockService)(nil).GetByUserID), ctx, masterTx, userID)
}

// GetByUserIDs mocks base method
func (m *MockService) GetByUserIDs(ctx context.Context, masterTx repository.MasterTx, userIDs []int) (userprofile.EntitySlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserIDs", ctx, masterTx, userIDs)
	ret0, _ := ret[0].(userprofile.EntitySlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserIDs indicates an expected call of GetByUserIDs
func (mr *MockServiceMockRecorder) GetByUserIDs(ctx, masterTx, userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserIDs", reflect.TypeOf((*MockService)(nil).GetByUserIDs), ctx, masterTx, userIDs)
}
