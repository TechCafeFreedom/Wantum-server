// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/service/wish_card_tag/service.go

// Package mock_wish_card_tag is a generated GoMock package.
package mock_wish_card_tag

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	repository "wantum/pkg/domain/repository"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockService) Create(ctx context.Context, masterTx repository.MasterTx, wishCardID, tagID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, masterTx, wishCardID, tagID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockServiceMockRecorder) Create(ctx, masterTx, wishCardID, tagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), ctx, masterTx, wishCardID, tagID)
}

// CreateMultipleTags mocks base method
func (m *MockService) CreateMultipleTags(ctx context.Context, masterTx repository.MasterTx, wishCardID int, tagIDs []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultipleTags", ctx, masterTx, wishCardID, tagIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMultipleTags indicates an expected call of CreateMultipleTags
func (mr *MockServiceMockRecorder) CreateMultipleTags(ctx, masterTx, wishCardID, tagIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultipleTags", reflect.TypeOf((*MockService)(nil).CreateMultipleTags), ctx, masterTx, wishCardID, tagIDs)
}

// Delete mocks base method
func (m *MockService) Delete(ctx context.Context, masterTx repository.MasterTx, wishCardID, tagID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, masterTx, wishCardID, tagID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockServiceMockRecorder) Delete(ctx, masterTx, wishCardID, tagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), ctx, masterTx, wishCardID, tagID)
}

// DeleteByWishCardID mocks base method
func (m *MockService) DeleteByWishCardID(ctx context.Context, masterTx repository.MasterTx, wishCardID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByWishCardID", ctx, masterTx, wishCardID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByWishCardID indicates an expected call of DeleteByWishCardID
func (mr *MockServiceMockRecorder) DeleteByWishCardID(ctx, masterTx, wishCardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByWishCardID", reflect.TypeOf((*MockService)(nil).DeleteByWishCardID), ctx, masterTx, wishCardID)
}
