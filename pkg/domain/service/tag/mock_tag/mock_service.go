// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/service/tag/service.go

// Package mock_tag is a generated GoMock package.
package mock_tag

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	tag "wantum/pkg/domain/entity/tag"
	repository "wantum/pkg/domain/repository"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockService) Create(ctx context.Context, masterTx repository.MasterTx, name string) (*tag.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, masterTx, name)
	ret0, _ := ret[0].(*tag.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockServiceMockRecorder) Create(ctx, masterTx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), ctx, masterTx, name)
}

// Delete mocks base method
func (m *MockService) Delete(ctx context.Context, masterTx repository.MasterTx, tagID int) (*tag.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, masterTx, tagID)
	ret0, _ := ret[0].(*tag.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockServiceMockRecorder) Delete(ctx, masterTx, tagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), ctx, masterTx, tagID)
}

// GetByID mocks base method
func (m *MockService) GetByID(ctx context.Context, masterTx repository.MasterTx, tagID int) (*tag.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, masterTx, tagID)
	ret0, _ := ret[0].(*tag.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockServiceMockRecorder) GetByID(ctx, masterTx, tagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockService)(nil).GetByID), ctx, masterTx, tagID)
}

// GetByName mocks base method
func (m *MockService) GetByName(ctx context.Context, masterTx repository.MasterTx, name string) (*tag.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, masterTx, name)
	ret0, _ := ret[0].(*tag.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName
func (mr *MockServiceMockRecorder) GetByName(ctx, masterTx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockService)(nil).GetByName), ctx, masterTx, name)
}

// GetByWishCardID mocks base method
func (m *MockService) GetByWishCardID(ctx context.Context, masterTx repository.MasterTx, wishCardID int) (tag.EntitySlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByWishCardID", ctx, masterTx, wishCardID)
	ret0, _ := ret[0].(tag.EntitySlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByWishCardID indicates an expected call of GetByWishCardID
func (mr *MockServiceMockRecorder) GetByWishCardID(ctx, masterTx, wishCardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByWishCardID", reflect.TypeOf((*MockService)(nil).GetByWishCardID), ctx, masterTx, wishCardID)
}

// GetByMemoryID mocks base method
func (m *MockService) GetByMemoryID(ctx context.Context, masterTx repository.MasterTx, memoryID int) (tag.EntitySlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByMemoryID", ctx, masterTx, memoryID)
	ret0, _ := ret[0].(tag.EntitySlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByMemoryID indicates an expected call of GetByMemoryID
func (mr *MockServiceMockRecorder) GetByMemoryID(ctx, masterTx, memoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByMemoryID", reflect.TypeOf((*MockService)(nil).GetByMemoryID), ctx, masterTx, memoryID)
}
