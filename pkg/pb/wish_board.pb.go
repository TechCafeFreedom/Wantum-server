// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.12.4
// source: wish_board.proto

package pb

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// やりたいことボード新規作成リクエスト
type CreateWishBoardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// やりたいことボード名
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *CreateWishBoardRequest) Reset() {
	*x = CreateWishBoardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wish_board_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWishBoardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWishBoardRequest) ProtoMessage() {}

func (x *CreateWishBoardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wish_board_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWishBoardRequest.ProtoReflect.Descriptor instead.
func (*CreateWishBoardRequest) Descriptor() ([]byte, []int) {
	return file_wish_board_proto_rawDescGZIP(), []int{0}
}

func (x *CreateWishBoardRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

// やりたいことボード（ID, titleのみ）の配列を取得するためのリクエスト
type GetWishBoardListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取得開始位置を知らせるためのやりたいことボードID
	WishBoardId int64 `protobuf:"varint,1,opt,name=wish_board_id,json=wishBoardId,proto3" json:"wish_board_id,omitempty"`
	// 最大取得件数
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetWishBoardListRequest) Reset() {
	*x = GetWishBoardListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wish_board_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWishBoardListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWishBoardListRequest) ProtoMessage() {}

func (x *GetWishBoardListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wish_board_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWishBoardListRequest.ProtoReflect.Descriptor instead.
func (*GetWishBoardListRequest) Descriptor() ([]byte, []int) {
	return file_wish_board_proto_rawDescGZIP(), []int{1}
}

func (x *GetWishBoardListRequest) GetWishBoardId() int64 {
	if x != nil {
		return x.WishBoardId
	}
	return 0
}

func (x *GetWishBoardListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// IDをもとにやりたいことボードを1件取得するためのリクエスト
type GetWishBoardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// やりたいことボードを特定するためのID
	WishBoardId int64 `protobuf:"varint,1,opt,name=wish_board_id,json=wishBoardId,proto3" json:"wish_board_id,omitempty"`
}

func (x *GetWishBoardRequest) Reset() {
	*x = GetWishBoardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wish_board_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWishBoardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWishBoardRequest) ProtoMessage() {}

func (x *GetWishBoardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wish_board_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWishBoardRequest.ProtoReflect.Descriptor instead.
func (*GetWishBoardRequest) Descriptor() ([]byte, []int) {
	return file_wish_board_proto_rawDescGZIP(), []int{2}
}

func (x *GetWishBoardRequest) GetWishBoardId() int64 {
	if x != nil {
		return x.WishBoardId
	}
	return 0
}

// やりたいことボード名変更リクエスト
type UpdateWishBoardNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// やりたいことボードID
	WishBoardId int64 `protobuf:"varint,1,opt,name=wish_board_id,json=wishBoardId,proto3" json:"wish_board_id,omitempty"`
	// 新しいやりたいことボード名
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *UpdateWishBoardNameRequest) Reset() {
	*x = UpdateWishBoardNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wish_board_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWishBoardNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWishBoardNameRequest) ProtoMessage() {}

func (x *UpdateWishBoardNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wish_board_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWishBoardNameRequest.ProtoReflect.Descriptor instead.
func (*UpdateWishBoardNameRequest) Descriptor() ([]byte, []int) {
	return file_wish_board_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateWishBoardNameRequest) GetWishBoardId() int64 {
	if x != nil {
		return x.WishBoardId
	}
	return 0
}

func (x *UpdateWishBoardNameRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

// やりたいことボード背景画像変更リクエスト
type UpdateWishBoardBackgroundImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// やりたいことボードID
	WishBoardId int64 `protobuf:"varint,1,opt,name=wish_board_id,json=wishBoardId,proto3" json:"wish_board_id,omitempty"`
	// 新しい背景画像ファイル
	BackgroundImage []byte `protobuf:"bytes,2,opt,name=background_image,json=backgroundImage,proto3" json:"background_image,omitempty"`
}

func (x *UpdateWishBoardBackgroundImageRequest) Reset() {
	*x = UpdateWishBoardBackgroundImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wish_board_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWishBoardBackgroundImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWishBoardBackgroundImageRequest) ProtoMessage() {}

func (x *UpdateWishBoardBackgroundImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wish_board_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWishBoardBackgroundImageRequest.ProtoReflect.Descriptor instead.
func (*UpdateWishBoardBackgroundImageRequest) Descriptor() ([]byte, []int) {
	return file_wish_board_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateWishBoardBackgroundImageRequest) GetWishBoardId() int64 {
	if x != nil {
		return x.WishBoardId
	}
	return 0
}

func (x *UpdateWishBoardBackgroundImageRequest) GetBackgroundImage() []byte {
	if x != nil {
		return x.BackgroundImage
	}
	return nil
}

// やりたいことカテゴリーの並び替えリクエスト
type UpdateWishCategoryAndCardPositionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// やりたいことボードID
	WishBoardId int64 `protobuf:"varint,1,opt,name=wish_board_id,json=wishBoardId,proto3" json:"wish_board_id,omitempty"`
	// やりたいことカテゴリーの並び順（IDの配列）
	Position []*WishCategoryAndCardPosition `protobuf:"bytes,2,rep,name=position,proto3" json:"position,omitempty"`
}

func (x *UpdateWishCategoryAndCardPositionRequest) Reset() {
	*x = UpdateWishCategoryAndCardPositionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wish_board_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWishCategoryAndCardPositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWishCategoryAndCardPositionRequest) ProtoMessage() {}

func (x *UpdateWishCategoryAndCardPositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wish_board_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWishCategoryAndCardPositionRequest.ProtoReflect.Descriptor instead.
func (*UpdateWishCategoryAndCardPositionRequest) Descriptor() ([]byte, []int) {
	return file_wish_board_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateWishCategoryAndCardPositionRequest) GetWishBoardId() int64 {
	if x != nil {
		return x.WishBoardId
	}
	return 0
}

func (x *UpdateWishCategoryAndCardPositionRequest) GetPosition() []*WishCategoryAndCardPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

// やりたいことカテゴリーとカードのポジションを表したもの
type WishCategoryAndCardPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// やりたいことカテゴリーID
	WishCategoryId int64 `protobuf:"varint,1,opt,name=wish_category_id,json=wishCategoryId,proto3" json:"wish_category_id,omitempty"`
	// やりたいことカテゴリーに所属するカードのID一覧（並び順を表す配列）
	WishCardIds []int64 `protobuf:"varint,2,rep,packed,name=wish_card_ids,json=wishCardIds,proto3" json:"wish_card_ids,omitempty"`
}

func (x *WishCategoryAndCardPosition) Reset() {
	*x = WishCategoryAndCardPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wish_board_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WishCategoryAndCardPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WishCategoryAndCardPosition) ProtoMessage() {}

func (x *WishCategoryAndCardPosition) ProtoReflect() protoreflect.Message {
	mi := &file_wish_board_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WishCategoryAndCardPosition.ProtoReflect.Descriptor instead.
func (*WishCategoryAndCardPosition) Descriptor() ([]byte, []int) {
	return file_wish_board_proto_rawDescGZIP(), []int{6}
}

func (x *WishCategoryAndCardPosition) GetWishCategoryId() int64 {
	if x != nil {
		return x.WishCategoryId
	}
	return 0
}

func (x *WishCategoryAndCardPosition) GetWishCardIds() []int64 {
	if x != nil {
		return x.WishCardIds
	}
	return nil
}

// やりたいことボード削除用リクエスト
type DeleteWishBoardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 削除したいやりたいことボードのID
	WishBoardId int64 `protobuf:"varint,1,opt,name=wish_board_id,json=wishBoardId,proto3" json:"wish_board_id,omitempty"`
}

func (x *DeleteWishBoardRequest) Reset() {
	*x = DeleteWishBoardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wish_board_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWishBoardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWishBoardRequest) ProtoMessage() {}

func (x *DeleteWishBoardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wish_board_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWishBoardRequest.ProtoReflect.Descriptor instead.
func (*DeleteWishBoardRequest) Descriptor() ([]byte, []int) {
	return file_wish_board_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteWishBoardRequest) GetWishBoardId() int64 {
	if x != nil {
		return x.WishBoardId
	}
	return 0
}

// やりたいことボードの一覧（配列）
type WishBoardList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// やりたいことボード一覧（配列）
	WishBoard []*WishBoard `protobuf:"bytes,1,rep,name=wish_board,json=wishBoard,proto3" json:"wish_board,omitempty"`
}

func (x *WishBoardList) Reset() {
	*x = WishBoardList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wish_board_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WishBoardList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WishBoardList) ProtoMessage() {}

func (x *WishBoardList) ProtoReflect() protoreflect.Message {
	mi := &file_wish_board_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WishBoardList.ProtoReflect.Descriptor instead.
func (*WishBoardList) Descriptor() ([]byte, []int) {
	return file_wish_board_proto_rawDescGZIP(), []int{8}
}

func (x *WishBoardList) GetWishBoard() []*WishBoard {
	if x != nil {
		return x.WishBoard
	}
	return nil
}

// やりたいことボード情報
type WishBoard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// やりたいことボードを特定するためのID
	WishBoardId int64 `protobuf:"varint,1,opt,name=wish_board_id,json=wishBoardId,proto3" json:"wish_board_id,omitempty"`
	// やりたいことボードタイトル
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// やりたいことカテゴリー一覧（配列）
	WishCategories []*WishCategory `protobuf:"bytes,3,rep,name=wish_categories,json=wishCategories,proto3" json:"wish_categories,omitempty"`
	// 編集権限を持っているユーザー一覧（配列）
	Authors []*User `protobuf:"bytes,4,rep,name=authors,proto3" json:"authors,omitempty"`
	// 招待リンク
	InviteUrl string `protobuf:"bytes,5,opt,name=invite_url,json=inviteUrl,proto3" json:"invite_url,omitempty"`
	// 背景画像URL
	BackgroundImageUrl string `protobuf:"bytes,6,opt,name=background_image_url,json=backgroundImageUrl,proto3" json:"background_image_url,omitempty"`
}

func (x *WishBoard) Reset() {
	*x = WishBoard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wish_board_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WishBoard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WishBoard) ProtoMessage() {}

func (x *WishBoard) ProtoReflect() protoreflect.Message {
	mi := &file_wish_board_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WishBoard.ProtoReflect.Descriptor instead.
func (*WishBoard) Descriptor() ([]byte, []int) {
	return file_wish_board_proto_rawDescGZIP(), []int{9}
}

func (x *WishBoard) GetWishBoardId() int64 {
	if x != nil {
		return x.WishBoardId
	}
	return 0
}

func (x *WishBoard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *WishBoard) GetWishCategories() []*WishCategory {
	if x != nil {
		return x.WishCategories
	}
	return nil
}

func (x *WishBoard) GetAuthors() []*User {
	if x != nil {
		return x.Authors
	}
	return nil
}

func (x *WishBoard) GetInviteUrl() string {
	if x != nil {
		return x.InviteUrl
	}
	return ""
}

func (x *WishBoard) GetBackgroundImageUrl() string {
	if x != nil {
		return x.BackgroundImageUrl
	}
	return ""
}

var File_wish_board_proto protoreflect.FileDescriptor

var file_wish_board_proto_rawDesc = []byte{
	0x0a, 0x10, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x1a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x13, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x2e, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x22, 0x53, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x57, 0x69, 0x73, 0x68, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d,
	0x77, 0x69, 0x73, 0x68, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x69, 0x73, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x39, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x57, 0x69, 0x73,
	0x68, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x69, 0x73, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x22, 0x56, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0d, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x69, 0x73, 0x68, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x76, 0x0a, 0x25, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x69, 0x73, 0x68, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x22, 0x98, 0x01, 0x0a, 0x28, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0d, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x69, 0x73, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x48, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x57, 0x69, 0x73, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6b, 0x0a, 0x1b,
	0x57, 0x69, 0x73, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x77,
	0x69, 0x73, 0x68, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x77, 0x69, 0x73, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x69,
	0x73, 0x68, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x22, 0x3c, 0x0a, 0x16, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x69, 0x73, 0x68,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x0d, 0x57, 0x69, 0x73, 0x68, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x77, 0x69, 0x73, 0x68,
	0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x57,
	0x69, 0x73, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x09, 0x77, 0x69, 0x73, 0x68, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x22, 0x8d, 0x02, 0x0a, 0x09, 0x57, 0x69, 0x73, 0x68, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x69, 0x73, 0x68, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x77,
	0x69, 0x73, 0x68, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x73,
	0x68, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x57, 0x69, 0x73, 0x68, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0e, 0x77, 0x69, 0x73, 0x68, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x72, 0x6c, 0x32, 0xbd, 0x05, 0x0a, 0x10, 0x57, 0x69, 0x73, 0x68, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x27, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x57, 0x69, 0x73, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x22, 0x00, 0x12, 0x5e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x57, 0x69, 0x73, 0x68, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x77,
	0x69, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x69, 0x73, 0x68,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x57, 0x69, 0x73, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x00, 0x12, 0x54, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x57, 0x69, 0x73, 0x68, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x69, 0x73, 0x68, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x77, 0x69, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x57, 0x69, 0x73, 0x68, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5c, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x69, 0x73, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x77, 0x69, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x69, 0x73, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x1a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x77, 0x69, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x69, 0x73, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x6e, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a,
	0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_wish_board_proto_rawDescOnce sync.Once
	file_wish_board_proto_rawDescData = file_wish_board_proto_rawDesc
)

func file_wish_board_proto_rawDescGZIP() []byte {
	file_wish_board_proto_rawDescOnce.Do(func() {
		file_wish_board_proto_rawDescData = protoimpl.X.CompressGZIP(file_wish_board_proto_rawDescData)
	})
	return file_wish_board_proto_rawDescData
}

var file_wish_board_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_wish_board_proto_goTypes = []interface{}{
	(*CreateWishBoardRequest)(nil),                   // 0: proto_wishboard.CreateWishBoardRequest
	(*GetWishBoardListRequest)(nil),                  // 1: proto_wishboard.GetWishBoardListRequest
	(*GetWishBoardRequest)(nil),                      // 2: proto_wishboard.GetWishBoardRequest
	(*UpdateWishBoardNameRequest)(nil),               // 3: proto_wishboard.UpdateWishBoardNameRequest
	(*UpdateWishBoardBackgroundImageRequest)(nil),    // 4: proto_wishboard.UpdateWishBoardBackgroundImageRequest
	(*UpdateWishCategoryAndCardPositionRequest)(nil), // 5: proto_wishboard.UpdateWishCategoryAndCardPositionRequest
	(*WishCategoryAndCardPosition)(nil),              // 6: proto_wishboard.WishCategoryAndCardPosition
	(*DeleteWishBoardRequest)(nil),                   // 7: proto_wishboard.DeleteWishBoardRequest
	(*WishBoardList)(nil),                            // 8: proto_wishboard.WishBoardList
	(*WishBoard)(nil),                                // 9: proto_wishboard.WishBoard
	(*WishCategory)(nil),                             // 10: proto_wishcategory.WishCategory
	(*User)(nil),                                     // 11: proto_user.User
	(*empty.Empty)(nil),                              // 12: google.protobuf.Empty
}
var file_wish_board_proto_depIdxs = []int32{
	6,  // 0: proto_wishboard.UpdateWishCategoryAndCardPositionRequest.position:type_name -> proto_wishboard.WishCategoryAndCardPosition
	9,  // 1: proto_wishboard.WishBoardList.wish_board:type_name -> proto_wishboard.WishBoard
	10, // 2: proto_wishboard.WishBoard.wish_categories:type_name -> proto_wishcategory.WishCategory
	11, // 3: proto_wishboard.WishBoard.authors:type_name -> proto_user.User
	0,  // 4: proto_wishboard.WishBoardService.CreateWishBoard:input_type -> proto_wishboard.CreateWishBoardRequest
	1,  // 5: proto_wishboard.WishBoardService.GetWishBoardList:input_type -> proto_wishboard.GetWishBoardListRequest
	2,  // 6: proto_wishboard.WishBoardService.GetWishBoard:input_type -> proto_wishboard.GetWishBoardRequest
	3,  // 7: proto_wishboard.WishBoardService.UpdateWishBoardName:input_type -> proto_wishboard.UpdateWishBoardNameRequest
	4,  // 8: proto_wishboard.WishBoardService.UpdateWishBoardBackgroundImage:input_type -> proto_wishboard.UpdateWishBoardBackgroundImageRequest
	5,  // 9: proto_wishboard.WishBoardService.UpdateWishCategoryPriority:input_type -> proto_wishboard.UpdateWishCategoryAndCardPositionRequest
	7,  // 10: proto_wishboard.WishBoardService.DeleteWishBoard:input_type -> proto_wishboard.DeleteWishBoardRequest
	9,  // 11: proto_wishboard.WishBoardService.CreateWishBoard:output_type -> proto_wishboard.WishBoard
	8,  // 12: proto_wishboard.WishBoardService.GetWishBoardList:output_type -> proto_wishboard.WishBoardList
	9,  // 13: proto_wishboard.WishBoardService.GetWishBoard:output_type -> proto_wishboard.WishBoard
	12, // 14: proto_wishboard.WishBoardService.UpdateWishBoardName:output_type -> google.protobuf.Empty
	12, // 15: proto_wishboard.WishBoardService.UpdateWishBoardBackgroundImage:output_type -> google.protobuf.Empty
	12, // 16: proto_wishboard.WishBoardService.UpdateWishCategoryPriority:output_type -> google.protobuf.Empty
	12, // 17: proto_wishboard.WishBoardService.DeleteWishBoard:output_type -> google.protobuf.Empty
	11, // [11:18] is the sub-list for method output_type
	4,  // [4:11] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_wish_board_proto_init() }
func file_wish_board_proto_init() {
	if File_wish_board_proto != nil {
		return
	}
	file_user_proto_init()
	file_wish_category_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_wish_board_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWishBoardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wish_board_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWishBoardListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wish_board_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWishBoardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wish_board_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWishBoardNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wish_board_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWishBoardBackgroundImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wish_board_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWishCategoryAndCardPositionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wish_board_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WishCategoryAndCardPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wish_board_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWishBoardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wish_board_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WishBoardList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wish_board_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WishBoard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wish_board_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wish_board_proto_goTypes,
		DependencyIndexes: file_wish_board_proto_depIdxs,
		MessageInfos:      file_wish_board_proto_msgTypes,
	}.Build()
	File_wish_board_proto = out.File
	file_wish_board_proto_rawDesc = nil
	file_wish_board_proto_goTypes = nil
	file_wish_board_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WishBoardServiceClient is the client API for WishBoardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WishBoardServiceClient interface {
	// やりたいことボードの新規作成
	CreateWishBoard(ctx context.Context, in *CreateWishBoardRequest, opts ...grpc.CallOption) (*WishBoard, error)
	// やりたいことボード一覧取得
	GetWishBoardList(ctx context.Context, in *GetWishBoardListRequest, opts ...grpc.CallOption) (*WishBoardList, error)
	// やりたいことボード単体取得
	GetWishBoard(ctx context.Context, in *GetWishBoardRequest, opts ...grpc.CallOption) (WishBoardService_GetWishBoardClient, error)
	// やりたいことボード名更新
	UpdateWishBoardName(ctx context.Context, in *UpdateWishBoardNameRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// やりたいことボードの背景画像更新
	UpdateWishBoardBackgroundImage(ctx context.Context, in *UpdateWishBoardBackgroundImageRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// やりたいことカテゴリー、カードの並び順更新
	UpdateWishCategoryPriority(ctx context.Context, in *UpdateWishCategoryAndCardPositionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// やりたいことボード自体の削除
	DeleteWishBoard(ctx context.Context, in *DeleteWishBoardRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type wishBoardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWishBoardServiceClient(cc grpc.ClientConnInterface) WishBoardServiceClient {
	return &wishBoardServiceClient{cc}
}

func (c *wishBoardServiceClient) CreateWishBoard(ctx context.Context, in *CreateWishBoardRequest, opts ...grpc.CallOption) (*WishBoard, error) {
	out := new(WishBoard)
	err := c.cc.Invoke(ctx, "/proto_wishboard.WishBoardService/CreateWishBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishBoardServiceClient) GetWishBoardList(ctx context.Context, in *GetWishBoardListRequest, opts ...grpc.CallOption) (*WishBoardList, error) {
	out := new(WishBoardList)
	err := c.cc.Invoke(ctx, "/proto_wishboard.WishBoardService/GetWishBoardList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishBoardServiceClient) GetWishBoard(ctx context.Context, in *GetWishBoardRequest, opts ...grpc.CallOption) (WishBoardService_GetWishBoardClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WishBoardService_serviceDesc.Streams[0], "/proto_wishboard.WishBoardService/GetWishBoard", opts...)
	if err != nil {
		return nil, err
	}
	x := &wishBoardServiceGetWishBoardClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WishBoardService_GetWishBoardClient interface {
	Recv() (*WishBoard, error)
	grpc.ClientStream
}

type wishBoardServiceGetWishBoardClient struct {
	grpc.ClientStream
}

func (x *wishBoardServiceGetWishBoardClient) Recv() (*WishBoard, error) {
	m := new(WishBoard)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wishBoardServiceClient) UpdateWishBoardName(ctx context.Context, in *UpdateWishBoardNameRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto_wishboard.WishBoardService/UpdateWishBoardName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishBoardServiceClient) UpdateWishBoardBackgroundImage(ctx context.Context, in *UpdateWishBoardBackgroundImageRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto_wishboard.WishBoardService/UpdateWishBoardBackgroundImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishBoardServiceClient) UpdateWishCategoryPriority(ctx context.Context, in *UpdateWishCategoryAndCardPositionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto_wishboard.WishBoardService/UpdateWishCategoryPriority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishBoardServiceClient) DeleteWishBoard(ctx context.Context, in *DeleteWishBoardRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto_wishboard.WishBoardService/DeleteWishBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WishBoardServiceServer is the server API for WishBoardService service.
type WishBoardServiceServer interface {
	// やりたいことボードの新規作成
	CreateWishBoard(context.Context, *CreateWishBoardRequest) (*WishBoard, error)
	// やりたいことボード一覧取得
	GetWishBoardList(context.Context, *GetWishBoardListRequest) (*WishBoardList, error)
	// やりたいことボード単体取得
	GetWishBoard(*GetWishBoardRequest, WishBoardService_GetWishBoardServer) error
	// やりたいことボード名更新
	UpdateWishBoardName(context.Context, *UpdateWishBoardNameRequest) (*empty.Empty, error)
	// やりたいことボードの背景画像更新
	UpdateWishBoardBackgroundImage(context.Context, *UpdateWishBoardBackgroundImageRequest) (*empty.Empty, error)
	// やりたいことカテゴリー、カードの並び順更新
	UpdateWishCategoryPriority(context.Context, *UpdateWishCategoryAndCardPositionRequest) (*empty.Empty, error)
	// やりたいことボード自体の削除
	DeleteWishBoard(context.Context, *DeleteWishBoardRequest) (*empty.Empty, error)
}

// UnimplementedWishBoardServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWishBoardServiceServer struct {
}

func (*UnimplementedWishBoardServiceServer) CreateWishBoard(context.Context, *CreateWishBoardRequest) (*WishBoard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWishBoard not implemented")
}
func (*UnimplementedWishBoardServiceServer) GetWishBoardList(context.Context, *GetWishBoardListRequest) (*WishBoardList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWishBoardList not implemented")
}
func (*UnimplementedWishBoardServiceServer) GetWishBoard(*GetWishBoardRequest, WishBoardService_GetWishBoardServer) error {
	return status.Errorf(codes.Unimplemented, "method GetWishBoard not implemented")
}
func (*UnimplementedWishBoardServiceServer) UpdateWishBoardName(context.Context, *UpdateWishBoardNameRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWishBoardName not implemented")
}
func (*UnimplementedWishBoardServiceServer) UpdateWishBoardBackgroundImage(context.Context, *UpdateWishBoardBackgroundImageRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWishBoardBackgroundImage not implemented")
}
func (*UnimplementedWishBoardServiceServer) UpdateWishCategoryPriority(context.Context, *UpdateWishCategoryAndCardPositionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWishCategoryPriority not implemented")
}
func (*UnimplementedWishBoardServiceServer) DeleteWishBoard(context.Context, *DeleteWishBoardRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWishBoard not implemented")
}

func RegisterWishBoardServiceServer(s *grpc.Server, srv WishBoardServiceServer) {
	s.RegisterService(&_WishBoardService_serviceDesc, srv)
}

func _WishBoardService_CreateWishBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWishBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishBoardServiceServer).CreateWishBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_wishboard.WishBoardService/CreateWishBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishBoardServiceServer).CreateWishBoard(ctx, req.(*CreateWishBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishBoardService_GetWishBoardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWishBoardListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishBoardServiceServer).GetWishBoardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_wishboard.WishBoardService/GetWishBoardList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishBoardServiceServer).GetWishBoardList(ctx, req.(*GetWishBoardListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishBoardService_GetWishBoard_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetWishBoardRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WishBoardServiceServer).GetWishBoard(m, &wishBoardServiceGetWishBoardServer{stream})
}

type WishBoardService_GetWishBoardServer interface {
	Send(*WishBoard) error
	grpc.ServerStream
}

type wishBoardServiceGetWishBoardServer struct {
	grpc.ServerStream
}

func (x *wishBoardServiceGetWishBoardServer) Send(m *WishBoard) error {
	return x.ServerStream.SendMsg(m)
}

func _WishBoardService_UpdateWishBoardName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWishBoardNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishBoardServiceServer).UpdateWishBoardName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_wishboard.WishBoardService/UpdateWishBoardName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishBoardServiceServer).UpdateWishBoardName(ctx, req.(*UpdateWishBoardNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishBoardService_UpdateWishBoardBackgroundImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWishBoardBackgroundImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishBoardServiceServer).UpdateWishBoardBackgroundImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_wishboard.WishBoardService/UpdateWishBoardBackgroundImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishBoardServiceServer).UpdateWishBoardBackgroundImage(ctx, req.(*UpdateWishBoardBackgroundImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishBoardService_UpdateWishCategoryPriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWishCategoryAndCardPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishBoardServiceServer).UpdateWishCategoryPriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_wishboard.WishBoardService/UpdateWishCategoryPriority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishBoardServiceServer).UpdateWishCategoryPriority(ctx, req.(*UpdateWishCategoryAndCardPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishBoardService_DeleteWishBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWishBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishBoardServiceServer).DeleteWishBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_wishboard.WishBoardService/DeleteWishBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishBoardServiceServer).DeleteWishBoard(ctx, req.(*DeleteWishBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WishBoardService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto_wishboard.WishBoardService",
	HandlerType: (*WishBoardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWishBoard",
			Handler:    _WishBoardService_CreateWishBoard_Handler,
		},
		{
			MethodName: "GetWishBoardList",
			Handler:    _WishBoardService_GetWishBoardList_Handler,
		},
		{
			MethodName: "UpdateWishBoardName",
			Handler:    _WishBoardService_UpdateWishBoardName_Handler,
		},
		{
			MethodName: "UpdateWishBoardBackgroundImage",
			Handler:    _WishBoardService_UpdateWishBoardBackgroundImage_Handler,
		},
		{
			MethodName: "UpdateWishCategoryPriority",
			Handler:    _WishBoardService_UpdateWishCategoryPriority_Handler,
		},
		{
			MethodName: "DeleteWishBoard",
			Handler:    _WishBoardService_DeleteWishBoard_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetWishBoard",
			Handler:       _WishBoardService_GetWishBoard_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "wish_board.proto",
}
