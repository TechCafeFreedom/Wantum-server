// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.12.4
// source: wish_card.proto

package pb

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// やりたいことカード新規作成リクエスト
type CreateWishCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// やりたいことカテゴリーID
	WishCategoryId int64 `protobuf:"varint,1,opt,name=wish_category_id,json=wishCategoryId,proto3" json:"wish_category_id,omitempty"`
	// 何をしたいのか
	Activity string `protobuf:"bytes,2,opt,name=activity,proto3" json:"activity,omitempty"`
	// やりたいことの説明
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// いつやりたいか（UNIX）
	Date int64 `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
	// どこでそれをしたいのか
	Place string `protobuf:"bytes,5,opt,name=place,proto3" json:"place,omitempty"`
}

func (x *CreateWishCardRequest) Reset() {
	*x = CreateWishCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wish_card_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWishCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWishCardRequest) ProtoMessage() {}

func (x *CreateWishCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wish_card_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWishCardRequest.ProtoReflect.Descriptor instead.
func (*CreateWishCardRequest) Descriptor() ([]byte, []int) {
	return file_wish_card_proto_rawDescGZIP(), []int{0}
}

func (x *CreateWishCardRequest) GetWishCategoryId() int64 {
	if x != nil {
		return x.WishCategoryId
	}
	return 0
}

func (x *CreateWishCardRequest) GetActivity() string {
	if x != nil {
		return x.Activity
	}
	return ""
}

func (x *CreateWishCardRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateWishCardRequest) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *CreateWishCardRequest) GetPlace() string {
	if x != nil {
		return x.Place
	}
	return ""
}

// やりたいことカードのアクティビティ更新リクエスト
type UpdateWishCardActivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// カードのID
	WishCardId int64 `protobuf:"varint,1,opt,name=wish_card_id,json=wishCardId,proto3" json:"wish_card_id,omitempty"`
	// アクティビティ名
	Activity string `protobuf:"bytes,2,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *UpdateWishCardActivityRequest) Reset() {
	*x = UpdateWishCardActivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wish_card_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWishCardActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWishCardActivityRequest) ProtoMessage() {}

func (x *UpdateWishCardActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wish_card_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWishCardActivityRequest.ProtoReflect.Descriptor instead.
func (*UpdateWishCardActivityRequest) Descriptor() ([]byte, []int) {
	return file_wish_card_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateWishCardActivityRequest) GetWishCardId() int64 {
	if x != nil {
		return x.WishCardId
	}
	return 0
}

func (x *UpdateWishCardActivityRequest) GetActivity() string {
	if x != nil {
		return x.Activity
	}
	return ""
}

// やりたいことカードの説明更新リクエスト
type UpdateWishCardDescriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// カードのID
	WishCardId int64 `protobuf:"varint,1,opt,name=wish_card_id,json=wishCardId,proto3" json:"wish_card_id,omitempty"`
	// 説明
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UpdateWishCardDescriptionRequest) Reset() {
	*x = UpdateWishCardDescriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wish_card_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWishCardDescriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWishCardDescriptionRequest) ProtoMessage() {}

func (x *UpdateWishCardDescriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wish_card_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWishCardDescriptionRequest.ProtoReflect.Descriptor instead.
func (*UpdateWishCardDescriptionRequest) Descriptor() ([]byte, []int) {
	return file_wish_card_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateWishCardDescriptionRequest) GetWishCardId() int64 {
	if x != nil {
		return x.WishCardId
	}
	return 0
}

func (x *UpdateWishCardDescriptionRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// やりたいことカードの日付変更リクエスト
type UpdateWishCardDateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// カードのID
	WishCardId int64 `protobuf:"varint,1,opt,name=wish_card_id,json=wishCardId,proto3" json:"wish_card_id,omitempty"`
	// 日付
	Date int64 `protobuf:"varint,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *UpdateWishCardDateRequest) Reset() {
	*x = UpdateWishCardDateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wish_card_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWishCardDateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWishCardDateRequest) ProtoMessage() {}

func (x *UpdateWishCardDateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wish_card_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWishCardDateRequest.ProtoReflect.Descriptor instead.
func (*UpdateWishCardDateRequest) Descriptor() ([]byte, []int) {
	return file_wish_card_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateWishCardDateRequest) GetWishCardId() int64 {
	if x != nil {
		return x.WishCardId
	}
	return 0
}

func (x *UpdateWishCardDateRequest) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

// やりたいことカードの場所変更リクエスト
type UpdateWishCardPlaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// カードのID
	WishCardId int64 `protobuf:"varint,1,opt,name=wish_card_id,json=wishCardId,proto3" json:"wish_card_id,omitempty"`
	// 場所
	Place string `protobuf:"bytes,2,opt,name=place,proto3" json:"place,omitempty"`
}

func (x *UpdateWishCardPlaceRequest) Reset() {
	*x = UpdateWishCardPlaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wish_card_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWishCardPlaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWishCardPlaceRequest) ProtoMessage() {}

func (x *UpdateWishCardPlaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wish_card_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWishCardPlaceRequest.ProtoReflect.Descriptor instead.
func (*UpdateWishCardPlaceRequest) Descriptor() ([]byte, []int) {
	return file_wish_card_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateWishCardPlaceRequest) GetWishCardId() int64 {
	if x != nil {
		return x.WishCardId
	}
	return 0
}

func (x *UpdateWishCardPlaceRequest) GetPlace() string {
	if x != nil {
		return x.Place
	}
	return ""
}

// やりたいことカードに新規タグの追加リクエスト
type AddWishCardTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// タグを追加するやりたいことカードのID
	WishCardId int64 `protobuf:"varint,1,opt,name=wish_card_id,json=wishCardId,proto3" json:"wish_card_id,omitempty"`
	// 追加したいタグの名前一覧（配列）
	TagNames []string `protobuf:"bytes,2,rep,name=tag_names,json=tagNames,proto3" json:"tag_names,omitempty"`
}

func (x *AddWishCardTagsRequest) Reset() {
	*x = AddWishCardTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wish_card_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddWishCardTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddWishCardTagsRequest) ProtoMessage() {}

func (x *AddWishCardTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wish_card_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddWishCardTagsRequest.ProtoReflect.Descriptor instead.
func (*AddWishCardTagsRequest) Descriptor() ([]byte, []int) {
	return file_wish_card_proto_rawDescGZIP(), []int{5}
}

func (x *AddWishCardTagsRequest) GetWishCardId() int64 {
	if x != nil {
		return x.WishCardId
	}
	return 0
}

func (x *AddWishCardTagsRequest) GetTagNames() []string {
	if x != nil {
		return x.TagNames
	}
	return nil
}

// やりたいことカードからタグを削除
type DeleteWishCardTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// タグを削除するやりたいことカードのID
	WishCardId int64 `protobuf:"varint,1,opt,name=wish_card_id,json=wishCardId,proto3" json:"wish_card_id,omitempty"`
	// 削除したいタグのID一覧（配列）
	TagIds []int64 `protobuf:"varint,2,rep,packed,name=tag_ids,json=tagIds,proto3" json:"tag_ids,omitempty"`
}

func (x *DeleteWishCardTagsRequest) Reset() {
	*x = DeleteWishCardTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wish_card_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWishCardTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWishCardTagsRequest) ProtoMessage() {}

func (x *DeleteWishCardTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wish_card_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWishCardTagsRequest.ProtoReflect.Descriptor instead.
func (*DeleteWishCardTagsRequest) Descriptor() ([]byte, []int) {
	return file_wish_card_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteWishCardTagsRequest) GetWishCardId() int64 {
	if x != nil {
		return x.WishCardId
	}
	return 0
}

func (x *DeleteWishCardTagsRequest) GetTagIds() []int64 {
	if x != nil {
		return x.TagIds
	}
	return nil
}

// やりたいことカード情報
type WishCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// wish_cardを特定するためのID
	WishCardId int64 `protobuf:"varint,1,opt,name=wish_card_id,json=wishCardId,proto3" json:"wish_card_id,omitempty"`
	// 何をしたいのか
	Activity string `protobuf:"bytes,2,opt,name=activity,proto3" json:"activity,omitempty"`
	// やりたいことの説明
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// いつやりたいか（UNIX）
	Date int64 `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
	// 完了日時
	DoneAt string `protobuf:"bytes,5,opt,name=done_at,json=doneAt,proto3" json:"done_at,omitempty"`
	// どこでそれをしたいのか
	Place string `protobuf:"bytes,6,opt,name=place,proto3" json:"place,omitempty"`
	// タグ一覧（配列）
	Tags []*Tag `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *WishCard) Reset() {
	*x = WishCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wish_card_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WishCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WishCard) ProtoMessage() {}

func (x *WishCard) ProtoReflect() protoreflect.Message {
	mi := &file_wish_card_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WishCard.ProtoReflect.Descriptor instead.
func (*WishCard) Descriptor() ([]byte, []int) {
	return file_wish_card_proto_rawDescGZIP(), []int{7}
}

func (x *WishCard) GetWishCardId() int64 {
	if x != nil {
		return x.WishCardId
	}
	return 0
}

func (x *WishCard) GetActivity() string {
	if x != nil {
		return x.Activity
	}
	return ""
}

func (x *WishCard) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WishCard) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *WishCard) GetDoneAt() string {
	if x != nil {
		return x.DoneAt
	}
	return ""
}

func (x *WishCard) GetPlace() string {
	if x != nil {
		return x.Place
	}
	return ""
}

func (x *WishCard) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

var File_wish_card_proto protoreflect.FileDescriptor

var file_wish_card_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x73, 0x68, 0x63, 0x61, 0x72,
	0x64, 0x1a, 0x09, 0x74, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x01, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x77,
	0x69, 0x73, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x22, 0x5d, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57,
	0x69, 0x73, 0x68, 0x43, 0x61, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x77, 0x69,
	0x73, 0x68, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x22, 0x66, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69,
	0x73, 0x68, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x69, 0x73, 0x68,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x77, 0x69, 0x73, 0x68, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x19,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x43, 0x61, 0x72, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x69, 0x73,
	0x68, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x77, 0x69, 0x73, 0x68, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22,
	0x54, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x43, 0x61, 0x72,
	0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0c, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x77, 0x69, 0x73, 0x68, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x22, 0x57, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x57, 0x69, 0x73, 0x68,
	0x43, 0x61, 0x72, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0c, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x77, 0x69, 0x73, 0x68, 0x43, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x56,
	0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x43, 0x61, 0x72, 0x64,
	0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x77,
	0x69, 0x73, 0x68, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x77, 0x69, 0x73, 0x68, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06,
	0x74, 0x61, 0x67, 0x49, 0x64, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x08, 0x57, 0x69, 0x73, 0x68, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x77, 0x69, 0x73, 0x68, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x6f, 0x6e, 0x65, 0x5f,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6e, 0x65, 0x41, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x61, 0x67,
	0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x32, 0x9c, 0x05, 0x0a, 0x0f, 0x57,
	0x69, 0x73, 0x68, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x73,
	0x68, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57,
	0x69, 0x73, 0x68, 0x43, 0x61, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12,
	0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x73, 0x68, 0x63, 0x61, 0x72, 0x64,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x43, 0x61, 0x72, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x77, 0x69,
	0x73, 0x68, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x73,
	0x68, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x59, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x43,
	0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x77, 0x69, 0x73, 0x68, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57,
	0x69, 0x73, 0x68, 0x43, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x12, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x73, 0x68,
	0x63, 0x61, 0x72, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x43,
	0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0f, 0x41, 0x64, 0x64,
	0x57, 0x69, 0x73, 0x68, 0x43, 0x61, 0x72, 0x64, 0x54, 0x61, 0x67, 0x73, 0x12, 0x26, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x73, 0x68, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x41, 0x64,
	0x64, 0x57, 0x69, 0x73, 0x68, 0x43, 0x61, 0x72, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x59,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x43, 0x61, 0x72, 0x64,
	0x54, 0x61, 0x67, 0x73, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x73,
	0x68, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68,
	0x43, 0x61, 0x72, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wish_card_proto_rawDescOnce sync.Once
	file_wish_card_proto_rawDescData = file_wish_card_proto_rawDesc
)

func file_wish_card_proto_rawDescGZIP() []byte {
	file_wish_card_proto_rawDescOnce.Do(func() {
		file_wish_card_proto_rawDescData = protoimpl.X.CompressGZIP(file_wish_card_proto_rawDescData)
	})
	return file_wish_card_proto_rawDescData
}

var file_wish_card_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_wish_card_proto_goTypes = []interface{}{
	(*CreateWishCardRequest)(nil),            // 0: proto_wishcard.CreateWishCardRequest
	(*UpdateWishCardActivityRequest)(nil),    // 1: proto_wishcard.UpdateWishCardActivityRequest
	(*UpdateWishCardDescriptionRequest)(nil), // 2: proto_wishcard.UpdateWishCardDescriptionRequest
	(*UpdateWishCardDateRequest)(nil),        // 3: proto_wishcard.UpdateWishCardDateRequest
	(*UpdateWishCardPlaceRequest)(nil),       // 4: proto_wishcard.UpdateWishCardPlaceRequest
	(*AddWishCardTagsRequest)(nil),           // 5: proto_wishcard.AddWishCardTagsRequest
	(*DeleteWishCardTagsRequest)(nil),        // 6: proto_wishcard.DeleteWishCardTagsRequest
	(*WishCard)(nil),                         // 7: proto_wishcard.WishCard
	(*Tag)(nil),                              // 8: proto_tag.Tag
	(*empty.Empty)(nil),                      // 9: google.protobuf.Empty
}
var file_wish_card_proto_depIdxs = []int32{
	8, // 0: proto_wishcard.WishCard.tags:type_name -> proto_tag.Tag
	0, // 1: proto_wishcard.WishCardService.CreateWishCardInfo:input_type -> proto_wishcard.CreateWishCardRequest
	1, // 2: proto_wishcard.WishCardService.UpdateWishCardActivity:input_type -> proto_wishcard.UpdateWishCardActivityRequest
	2, // 3: proto_wishcard.WishCardService.UpdateWishCardDescription:input_type -> proto_wishcard.UpdateWishCardDescriptionRequest
	3, // 4: proto_wishcard.WishCardService.UpdateWishCardDate:input_type -> proto_wishcard.UpdateWishCardDateRequest
	4, // 5: proto_wishcard.WishCardService.UpdateWishCardPlace:input_type -> proto_wishcard.UpdateWishCardPlaceRequest
	5, // 6: proto_wishcard.WishCardService.AddWishCardTags:input_type -> proto_wishcard.AddWishCardTagsRequest
	6, // 7: proto_wishcard.WishCardService.DeleteWishCardTags:input_type -> proto_wishcard.DeleteWishCardTagsRequest
	9, // 8: proto_wishcard.WishCardService.CreateWishCardInfo:output_type -> google.protobuf.Empty
	9, // 9: proto_wishcard.WishCardService.UpdateWishCardActivity:output_type -> google.protobuf.Empty
	9, // 10: proto_wishcard.WishCardService.UpdateWishCardDescription:output_type -> google.protobuf.Empty
	9, // 11: proto_wishcard.WishCardService.UpdateWishCardDate:output_type -> google.protobuf.Empty
	9, // 12: proto_wishcard.WishCardService.UpdateWishCardPlace:output_type -> google.protobuf.Empty
	9, // 13: proto_wishcard.WishCardService.AddWishCardTags:output_type -> google.protobuf.Empty
	9, // 14: proto_wishcard.WishCardService.DeleteWishCardTags:output_type -> google.protobuf.Empty
	8, // [8:15] is the sub-list for method output_type
	1, // [1:8] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_wish_card_proto_init() }
func file_wish_card_proto_init() {
	if File_wish_card_proto != nil {
		return
	}
	file_tag_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_wish_card_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWishCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wish_card_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWishCardActivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wish_card_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWishCardDescriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wish_card_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWishCardDateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wish_card_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWishCardPlaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wish_card_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddWishCardTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wish_card_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWishCardTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wish_card_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WishCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wish_card_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wish_card_proto_goTypes,
		DependencyIndexes: file_wish_card_proto_depIdxs,
		MessageInfos:      file_wish_card_proto_msgTypes,
	}.Build()
	File_wish_card_proto = out.File
	file_wish_card_proto_rawDesc = nil
	file_wish_card_proto_goTypes = nil
	file_wish_card_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WishCardServiceClient is the client API for WishCardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WishCardServiceClient interface {
	// やりたいことカードの新規作成
	CreateWishCardInfo(ctx context.Context, in *CreateWishCardRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// やりたいことカード(アクティビティ)の更新
	UpdateWishCardActivity(ctx context.Context, in *UpdateWishCardActivityRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// やりたいことカード(ディスクリプション)の更新
	UpdateWishCardDescription(ctx context.Context, in *UpdateWishCardDescriptionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// やりたいことカード(日付)の更新
	UpdateWishCardDate(ctx context.Context, in *UpdateWishCardDateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// やりたいことカード(場所)の更新
	UpdateWishCardPlace(ctx context.Context, in *UpdateWishCardPlaceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// やりたいことカードのタグを新規追加
	AddWishCardTags(ctx context.Context, in *AddWishCardTagsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// やりたいことカードのタグを削除
	DeleteWishCardTags(ctx context.Context, in *DeleteWishCardTagsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type wishCardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWishCardServiceClient(cc grpc.ClientConnInterface) WishCardServiceClient {
	return &wishCardServiceClient{cc}
}

func (c *wishCardServiceClient) CreateWishCardInfo(ctx context.Context, in *CreateWishCardRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto_wishcard.WishCardService/CreateWishCardInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishCardServiceClient) UpdateWishCardActivity(ctx context.Context, in *UpdateWishCardActivityRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto_wishcard.WishCardService/UpdateWishCardActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishCardServiceClient) UpdateWishCardDescription(ctx context.Context, in *UpdateWishCardDescriptionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto_wishcard.WishCardService/UpdateWishCardDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishCardServiceClient) UpdateWishCardDate(ctx context.Context, in *UpdateWishCardDateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto_wishcard.WishCardService/UpdateWishCardDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishCardServiceClient) UpdateWishCardPlace(ctx context.Context, in *UpdateWishCardPlaceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto_wishcard.WishCardService/UpdateWishCardPlace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishCardServiceClient) AddWishCardTags(ctx context.Context, in *AddWishCardTagsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto_wishcard.WishCardService/AddWishCardTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishCardServiceClient) DeleteWishCardTags(ctx context.Context, in *DeleteWishCardTagsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto_wishcard.WishCardService/DeleteWishCardTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WishCardServiceServer is the server API for WishCardService service.
type WishCardServiceServer interface {
	// やりたいことカードの新規作成
	CreateWishCardInfo(context.Context, *CreateWishCardRequest) (*empty.Empty, error)
	// やりたいことカード(アクティビティ)の更新
	UpdateWishCardActivity(context.Context, *UpdateWishCardActivityRequest) (*empty.Empty, error)
	// やりたいことカード(ディスクリプション)の更新
	UpdateWishCardDescription(context.Context, *UpdateWishCardDescriptionRequest) (*empty.Empty, error)
	// やりたいことカード(日付)の更新
	UpdateWishCardDate(context.Context, *UpdateWishCardDateRequest) (*empty.Empty, error)
	// やりたいことカード(場所)の更新
	UpdateWishCardPlace(context.Context, *UpdateWishCardPlaceRequest) (*empty.Empty, error)
	// やりたいことカードのタグを新規追加
	AddWishCardTags(context.Context, *AddWishCardTagsRequest) (*empty.Empty, error)
	// やりたいことカードのタグを削除
	DeleteWishCardTags(context.Context, *DeleteWishCardTagsRequest) (*empty.Empty, error)
}

// UnimplementedWishCardServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWishCardServiceServer struct {
}

func (*UnimplementedWishCardServiceServer) CreateWishCardInfo(context.Context, *CreateWishCardRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWishCardInfo not implemented")
}
func (*UnimplementedWishCardServiceServer) UpdateWishCardActivity(context.Context, *UpdateWishCardActivityRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWishCardActivity not implemented")
}
func (*UnimplementedWishCardServiceServer) UpdateWishCardDescription(context.Context, *UpdateWishCardDescriptionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWishCardDescription not implemented")
}
func (*UnimplementedWishCardServiceServer) UpdateWishCardDate(context.Context, *UpdateWishCardDateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWishCardDate not implemented")
}
func (*UnimplementedWishCardServiceServer) UpdateWishCardPlace(context.Context, *UpdateWishCardPlaceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWishCardPlace not implemented")
}
func (*UnimplementedWishCardServiceServer) AddWishCardTags(context.Context, *AddWishCardTagsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWishCardTags not implemented")
}
func (*UnimplementedWishCardServiceServer) DeleteWishCardTags(context.Context, *DeleteWishCardTagsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWishCardTags not implemented")
}

func RegisterWishCardServiceServer(s *grpc.Server, srv WishCardServiceServer) {
	s.RegisterService(&_WishCardService_serviceDesc, srv)
}

func _WishCardService_CreateWishCardInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWishCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishCardServiceServer).CreateWishCardInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_wishcard.WishCardService/CreateWishCardInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishCardServiceServer).CreateWishCardInfo(ctx, req.(*CreateWishCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishCardService_UpdateWishCardActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWishCardActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishCardServiceServer).UpdateWishCardActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_wishcard.WishCardService/UpdateWishCardActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishCardServiceServer).UpdateWishCardActivity(ctx, req.(*UpdateWishCardActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishCardService_UpdateWishCardDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWishCardDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishCardServiceServer).UpdateWishCardDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_wishcard.WishCardService/UpdateWishCardDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishCardServiceServer).UpdateWishCardDescription(ctx, req.(*UpdateWishCardDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishCardService_UpdateWishCardDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWishCardDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishCardServiceServer).UpdateWishCardDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_wishcard.WishCardService/UpdateWishCardDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishCardServiceServer).UpdateWishCardDate(ctx, req.(*UpdateWishCardDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishCardService_UpdateWishCardPlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWishCardPlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishCardServiceServer).UpdateWishCardPlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_wishcard.WishCardService/UpdateWishCardPlace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishCardServiceServer).UpdateWishCardPlace(ctx, req.(*UpdateWishCardPlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishCardService_AddWishCardTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWishCardTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishCardServiceServer).AddWishCardTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_wishcard.WishCardService/AddWishCardTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishCardServiceServer).AddWishCardTags(ctx, req.(*AddWishCardTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishCardService_DeleteWishCardTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWishCardTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishCardServiceServer).DeleteWishCardTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_wishcard.WishCardService/DeleteWishCardTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishCardServiceServer).DeleteWishCardTags(ctx, req.(*DeleteWishCardTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WishCardService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto_wishcard.WishCardService",
	HandlerType: (*WishCardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWishCardInfo",
			Handler:    _WishCardService_CreateWishCardInfo_Handler,
		},
		{
			MethodName: "UpdateWishCardActivity",
			Handler:    _WishCardService_UpdateWishCardActivity_Handler,
		},
		{
			MethodName: "UpdateWishCardDescription",
			Handler:    _WishCardService_UpdateWishCardDescription_Handler,
		},
		{
			MethodName: "UpdateWishCardDate",
			Handler:    _WishCardService_UpdateWishCardDate_Handler,
		},
		{
			MethodName: "UpdateWishCardPlace",
			Handler:    _WishCardService_UpdateWishCardPlace_Handler,
		},
		{
			MethodName: "AddWishCardTags",
			Handler:    _WishCardService_AddWishCardTags_Handler,
		},
		{
			MethodName: "DeleteWishCardTags",
			Handler:    _WishCardService_DeleteWishCardTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wish_card.proto",
}
